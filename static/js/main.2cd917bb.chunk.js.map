{"version":3,"sources":["components/MyNavbar/index.jsx","components/MyBanner/index.jsx","App.js","serviceWorker.js","index.js"],"names":["MyNavbar","props","toggleButton","setState","isActive","state","Navbar","sticky","expand","className","style","height","boxShadow","backgroundColor","Toggle","aria-controls","borderColor","padding","children","this","buttonColor","barColor","buttonWidth","Collapse","id","Nav","Item","Link","href","float","fontWeight","color","Component","MyBanner","Row","Col","xs","md","src","alt","width","position","marginTop","marginLeft","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wNAkFeA,E,YA7Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRC,aAAe,WACb,EAAKC,SAAS,CACZC,UAAW,EAAKC,MAAMD,YANxB,EAAKC,MAAQ,CACXD,UAAU,GAJK,E,sEAcjB,OACE,kBAAC,WAAD,KACE,kBAACE,EAAA,EAAD,CACEC,OAAO,MACPC,OAAO,KACPC,UAAU,sBACVC,MAAO,CACLC,OAAQ,OACRC,UAAW,kCACXC,gBAAiB,UAGnB,kBAACP,EAAA,EAAOQ,OAAR,CACEC,gBAAc,mBACdL,MAAO,CAAEM,YAAa,QAASC,QAAS,GACxCC,SACE,kBAAC,kBAAD,CACEd,SAAUe,KAAKd,MAAMD,SACrBF,aAAciB,KAAKjB,aACnBkB,YAAY,QACZC,SAAS,QACTC,YAAa,GACbZ,MAAO,CAAEO,QAAS,gBAIxB,kBAACX,EAAA,EAAOiB,SAAR,CACEC,GAAG,mBACHf,UAAU,0BAEV,kBAACgB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CACEC,KAAK,QACLlB,MAAO,CAAEmB,MAAO,QAASC,WAAY,OAAOC,MAAM,QAAQd,QAAQ,cAFpE,WAOF,kBAACQ,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CACEC,KAAK,QACLlB,MAAO,CAAEmB,MAAO,QAASC,WAAY,OAAOC,MAAM,QAAQd,QAAQ,cAFpE,SAOF,kBAACQ,EAAA,EAAIC,KAAL,KACE,kBAACD,EAAA,EAAIE,KAAL,CACEC,KAAK,QACLlB,MAAO,CAAEmB,MAAO,QAASC,WAAY,OAAOC,MAAM,QAAQd,QAAQ,cAFpE,iB,GA/DOe,a,kBC0CRC,EA3Cf,YACE,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDI,MAAQ,GAHI,EADrB,sEAQI,OACE,kBAAC,WAAD,KACE,kBAAC6B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAG3B,MAAO,CAAEO,QAAS,IACnC,yBACEqB,IAAI,yEACJC,IAAI,cACJ7B,MAAO,CAAE8B,MAAO,OAAQ7B,OAAQ,UAGpC,kBAACwB,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAG3B,MAAO,CAAEO,QAAS,EAAGwB,SAAU,aAChD,yBACEH,IAAI,6DACJC,IAAI,SACJ7B,MAAO,CAAE+B,SAAU,WAAWD,MAAM,MAAME,UAAU,MAAMC,WAAW,SAEvE,yBACEL,IAAI,2EACJC,IAAI,gBACJ7B,MAAO,CAAE8B,MAAO,OAAQ7B,OAAQ,UAGpC,kBAACwB,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAG3B,MAAO,CAAEO,QAAS,IACnC,yBACEqB,IAAI,0EACJC,IAAI,eACJ7B,MAAO,CAAE8B,MAAO,OAAQ7B,OAAQ,gBAlC9C,GAA8BqB,aCWfY,MATf,WACE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2cd917bb.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { HamburgerSlider } from \"react-animated-burgers\";\r\n\r\nclass MyNavbar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isActive: false\r\n    };\r\n  }\r\n  toggleButton = () => {\r\n    this.setState({\r\n      isActive: !this.state.isActive\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Navbar\r\n          sticky=\"top\"\r\n          expand=\"sm\"\r\n          className=\"justify-content-end\"\r\n          style={{\r\n            height: \"64px\",\r\n            boxShadow: \"0 4px 10px 0 rgba(0, 0, 0, 0.1)\",\r\n            backgroundColor: \"white\"\r\n          }}\r\n        >\r\n          <Navbar.Toggle\r\n            aria-controls=\"basic-navbar-nav\"\r\n            style={{ borderColor: \"white\", padding: 0 }}\r\n            children={\r\n              <HamburgerSlider\r\n                isActive={this.state.isActive}\r\n                toggleButton={this.toggleButton}\r\n                buttonColor=\"white\"\r\n                barColor=\"black\"\r\n                buttonWidth={30}\r\n                style={{ padding: \"4px 12px\" }}\r\n              />\r\n            }\r\n          />\r\n          <Navbar.Collapse\r\n            id=\"basic-navbar-nav\"\r\n            className=\"justify-content-center\"\r\n          >\r\n            <Nav>\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  href=\"#home\"\r\n                  style={{ float: \"right\", fontWeight: \"bold\",color:'black',padding:'14px 15px' }}\r\n                >\r\n                  Active\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  href=\"#home\"\r\n                  style={{ float: \"right\", fontWeight: \"bold\",color:'black',padding:'14px 15px' }}\r\n                >\r\n                  Link\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n              <Nav.Item>\r\n                <Nav.Link\r\n                  href=\"#home\"\r\n                  style={{ float: \"right\", fontWeight: \"bold\",color:'black',padding:'14px 15px' }}\r\n                >\r\n                  Link\r\n                </Nav.Link>\r\n              </Nav.Item>\r\n            </Nav>\r\n          </Navbar.Collapse>\r\n        </Navbar>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyNavbar;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Row, Col } from \"react-bootstrap\";\r\n\r\nexport class MyBanner extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <Row>\r\n          <Col xs={4} md={4} style={{ padding: 0 }}>\r\n            <img\r\n              src=\"https://www.xn--b3caa1e2a7e2b0h2be.com/img/hero_banner/banner-left.png\"\r\n              alt=\"banner-left\"\r\n              style={{ width: \"100%\", height: \"80%\" }}\r\n            />\r\n          </Col>\r\n          <Col xs={4} md={4} style={{ padding: 0, position: \"relative\" }}>\r\n            <img\r\n              src=\"https://www.xn--b3caa1e2a7e2b0h2be.com/img/logo/banner.png\"\r\n              alt=\"banner\"\r\n              style={{ position: \"absolute\",width:\"50%\",marginTop:'10%',marginLeft:'25%' }}\r\n            />\r\n            <img\r\n              src=\"https://www.xn--b3caa1e2a7e2b0h2be.com/img/hero_banner/banner-center.png\"\r\n              alt=\"banner-center\"\r\n              style={{ width: \"100%\", height: \"80%\" }}\r\n            />\r\n          </Col>\r\n          <Col xs={4} md={4} style={{ padding: 0 }}>\r\n            <img\r\n              src=\"https://www.xn--b3caa1e2a7e2b0h2be.com/img/hero_banner/banner-right.png\"\r\n              alt=\"banner-right\"\r\n              style={{ width: \"100%\", height: \"80%\" }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyBanner;\r\n","import React, { Fragment } from \"react\";\r\nimport \"./App.css\";\r\nimport MyNavbar from \"./components/MyNavbar\";\r\nimport MyBanner from \"./components/MyBanner\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Fragment>\r\n      <MyNavbar />\r\n      <MyBanner />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}